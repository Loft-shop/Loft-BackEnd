name: CI/CD with Docker Registry

on:
  push:
    branches:
      - main
      - master

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: ${{ secrets.DOCKER_USERNAME }}/loft

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push ApiGateway
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/ApiGateway/Dockerfile
        push: true
        tags: ${{ env.IMAGE_PREFIX }}-apigateway:latest,${{ env.IMAGE_PREFIX }}-apigateway:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}-apigateway:latest
        cache-to: type=inline

    - name: Build and push ProductService
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/ProductService/Dockerfile
        push: true
        tags: ${{ env.IMAGE_PREFIX }}-productservice:latest,${{ env.IMAGE_PREFIX }}-productservice:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}-productservice:latest
        cache-to: type=inline

    - name: Build and push CartService
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/CartService/Dockerfile
        push: true
        tags: ${{ env.IMAGE_PREFIX }}-cartservice:latest,${{ env.IMAGE_PREFIX }}-cartservice:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}-cartservice:latest
        cache-to: type=inline

    - name: Build and push OrderService
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/OrderService/Dockerfile
        push: true
        tags: ${{ env.IMAGE_PREFIX }}-orderservice:latest,${{ env.IMAGE_PREFIX }}-orderservice:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}-orderservice:latest
        cache-to: type=inline

    - name: Build and push PaymentService
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/PaymentService/Dockerfile
        push: true
        tags: ${{ env.IMAGE_PREFIX }}-paymentservice:latest,${{ env.IMAGE_PREFIX }}-paymentservice:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}-paymentservice:latest
        cache-to: type=inline

    - name: Build and push ShippingAddressService
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/ShippingAddressService/Dockerfile
        push: true
        tags: ${{ env.IMAGE_PREFIX }}-shippingaddressservice:latest,${{ env.IMAGE_PREFIX }}-shippingaddressservice:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}-shippingaddressservice:latest
        cache-to: type=inline

    - name: Build and push UserService
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/UserService/Dockerfile
        push: true
        tags: ${{ env.IMAGE_PREFIX }}-userservice:latest,${{ env.IMAGE_PREFIX }}-userservice:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}-userservice:latest
        cache-to: type=inline

  deploy:
    name: Deploy to Server
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        ssh $SERVER_USER@$SERVER_HOST << ENDSSH
          cd $DEPLOY_PATH
          
          # Логин в Docker Hub
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u $DOCKER_USERNAME --password-stdin
          
          # Pull новые образы
          docker compose pull
          
          # Перезапуск сервисов
          docker compose up -d --force-recreate
          
          # Проверка статуса
          docker compose ps
          
          # Очистка
          docker image prune -f
ENDSSH

